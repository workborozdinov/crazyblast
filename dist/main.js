!function(Q){var F={};function C(B){if(F[B])return F[B].exports;var I=F[B]={i:B,l:!1,exports:{}};return Q[B].call(I.exports,I,I.exports,C),I.l=!0,I.exports}C.m=Q,C.c=F,C.d=function(Q,F,B){C.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:B})},C.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},C.t=function(Q,F){if(1&F&&(Q=C(Q)),8&F)return Q;if(4&F&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var B=Object.create(null);if(C.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:Q}),2&F&&"string"!=typeof Q)for(var I in Q)C.d(B,I,function(F){return Q[F]}.bind(null,I));return B},C.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return C.d(F,"a",F),F},C.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},C.p="dist/",C(C.s=1)}([function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "font.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZm9udC5wbmc/MTM4ZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIscUJBQXVCIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmb250LnBuZ1wiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/gameClass/board.js\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar gameField =\n/*#__PURE__*/\nfunction () {\n  // constructor, simply turns obj information into class properties\n  function gameField(obj) {\n    _classCallCheck(this, gameField);\n\n    if (obj == undefined) {\n      obj = {};\n    }\n\n    this.rows = obj.rows != undefined ? obj.rows : 9;\n    this.columns = obj.columns != undefined ? obj.columns : 9;\n    this.items = obj.items != undefined ? obj.items : 4;\n    this.fallingDown = obj.fallingDown != undefined ? obj.fallingDown : true;\n  } // generates the game board\n\n\n  _createClass(gameField, [{\n    key: "generateBoard",\n    value: function generateBoard() {\n      this.gameArray = [];\n\n      for (var i = 0; i < this.rows; i++) {\n        this.gameArray[i] = [];\n\n        for (var j = 0; j < this.columns; j++) {\n          var randomValue = Math.floor(Math.random() * this.items);\n          this.gameArray[i][j] = {\n            value: randomValue,\n            isEmpty: false,\n            row: i,\n            column: j\n          };\n        }\n      }\n    } // returns the number of board rows\n\n  }, {\n    key: "getRows",\n    value: function getRows() {\n      return this.rows;\n    } // returns the number of board columns\n\n  }, {\n    key: "getColumns",\n    value: function getColumns() {\n      return this.columns;\n    } // returns true if the item at (row, column) is empty\n\n  }, {\n    key: "isEmpty",\n    value: function isEmpty(row, column) {\n      return this.gameArray[row][column].isEmpty;\n    } // returns the value of the item at (row, column), or false if it\'s not a valid pick\n\n  }, {\n    key: "getValueAt",\n    value: function getValueAt(row, column) {\n      if (!this.validPick(row, column)) {\n        return false;\n      }\n\n      return this.gameArray[row][column].value;\n    } // returns the custom data of the item at (row, column)\n\n  }, {\n    key: "getCustomDataAt",\n    value: function getCustomDataAt(row, column) {\n      return this.gameArray[row][column].customData;\n    } // returns true if the item at (row, column) is a valid pick\n\n  }, {\n    key: "validPick",\n    value: function validPick(row, column) {\n      return row >= 0 && row < this.rows && column >= 0 && column < this.columns && this.gameArray[row] != undefined && this.gameArray[row][column] != undefined;\n    } // sets a custom data on the item at (row, column)\n\n  }, {\n    key: "setCustomData",\n    value: function setCustomData(row, column, customData) {\n      this.gameArray[row][column].customData = customData;\n    } // returns an object with all connected items starting at (row, column)\n\n  }, {\n    key: "listConnectedItems",\n    value: function listConnectedItems(row, column) {\n      if (!this.validPick(row, column) || this.gameArray[row][column].isEmpty) {\n        return;\n      }\n\n      this.colorToLookFor = this.gameArray[row][column].value;\n      this.floodFillArray = [];\n      this.floodFillArray.length = 0;\n      this.floodFill(row, column);\n      return this.floodFillArray;\n    } // returns the number of connected items starting at (row, column)\n\n  }, {\n    key: "countConnectedItems",\n    value: function countConnectedItems(row, column) {\n      return this.listConnectedItems(row, column).length;\n    } // removes all connected items starting at (row, column)\n\n  }, {\n    key: "removeConnectedItems",\n    value: function removeConnectedItems(row, column) {\n      var items = this.listConnectedItems(row, column);\n      items.forEach(function (item) {\n        this.gameArray[item.row][item.column].isEmpty = true;\n      }.bind(this));\n    } // returs true if in the board there is at least a move with a minimum minCombo items\n\n  }, {\n    key: "stillPlayable",\n    value: function stillPlayable(minCombo) {\n      for (var i = 0; i < this.getRows(); i++) {\n        for (var j = 0; j < this.getColumns(); j++) {\n          if (!this.isEmpty(i, j) && this.countConnectedItems(i, j) >= minCombo) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    } // returns the amount of non empty items on the board\n\n  }, {\n    key: "nonEmptyItems",\n    value: function nonEmptyItems(minCombo) {\n      var result = 0;\n\n      for (var i = 0; i < this.getRows(); i++) {\n        for (var j = 0; j < this.getColumns(); j++) {\n          if (!this.isEmpty(i, j)) {\n            result++;\n          }\n        }\n      }\n\n      return result;\n    } // flood fill routine\n\n  }, {\n    key: "floodFill",\n    value: function floodFill(row, column) {\n      if (!this.validPick(row, column) || this.isEmpty(row, column)) {\n        return;\n      }\n\n      if (this.gameArray[row][column].value == this.colorToLookFor && !this.alreadyVisited(row, column)) {\n        this.floodFillArray.push({\n          row: row,\n          column: column\n        });\n        this.floodFill(row + 1, column);\n        this.floodFill(row - 1, column);\n        this.floodFill(row, column + 1);\n        this.floodFill(row, column - 1);\n      }\n    } // arranges the board, making items fall down. Returns an object with movement information\n\n  }, {\n    key: "arrangeBoard",\n    value: function arrangeBoard() {\n      var result = []; // falling down\n\n      if (this.fallingDown) {\n        for (var i = this.getRows() - 2; i >= 0; i--) {\n          for (var j = 0; j < this.getColumns(); j++) {\n            var emptySpaces = this.emptySpacesBelow(i, j);\n\n            if (!this.isEmpty(i, j) && emptySpaces > 0) {\n              this.swapItems(i, j, i + emptySpaces, j);\n              result.push({\n                row: i + emptySpaces,\n                column: j,\n                deltaRow: emptySpaces\n              });\n            }\n          }\n        }\n      } // falling up\n      else {\n          for (var _i = 1; _i < this.getRows(); _i++) {\n            for (var _j = 0; _j < this.getColumns(); _j++) {\n              var _emptySpaces = this.emptySpacesAbove(_i, _j);\n\n              if (!this.isEmpty(_i, _j) && _emptySpaces > 0) {\n                this.swapItems(_i, _j, _i - _emptySpaces, _j);\n                result.push({\n                  row: _i - _emptySpaces,\n                  column: _j,\n                  deltaRow: -_emptySpaces\n                });\n              }\n            }\n          }\n        }\n\n      return result;\n    } // checks if a column is completely empty\n\n  }, {\n    key: "isEmptyColumn",\n    value: function isEmptyColumn(column) {\n      return this.emptySpacesBelow(-1, column) == this.getRows();\n    } // counts empty columns to the left of column\n\n  }, {\n    key: "countLeftEmptyColumns",\n    value: function countLeftEmptyColumns(column) {\n      var result = 0;\n\n      for (var i = column - 1; i >= 0; i--) {\n        if (this.isEmptyColumn(i)) {\n          result++;\n        }\n      }\n\n      return result;\n    } // compacts the board to the left and returns an object with movement information\n\n  }, {\n    key: "compactBoardToLeft",\n    value: function compactBoardToLeft() {\n      var result = [];\n\n      for (var i = 1; i < this.getColumns(); i++) {\n        if (!this.isEmptyColumn(i)) {\n          var emptySpaces = this.countLeftEmptyColumns(i);\n\n          if (emptySpaces > 0) {\n            for (var j = 0; j < this.getRows(); j++) {\n              if (!this.isEmpty(j, i)) {\n                this.swapItems(j, i, j, i - emptySpaces);\n                result.push({\n                  row: j,\n                  column: i - emptySpaces,\n                  deltaColumn: -emptySpaces\n                });\n              }\n            }\n          }\n        }\n      }\n\n      return result;\n    } // replenishes the board and returns an object with movement information\n\n  }, {\n    key: "replenishBoard",\n    value: function replenishBoard() {\n      var result = [];\n\n      for (var i = 0; i < this.getColumns(); i++) {\n        if (this.isEmpty(0, i)) {\n          var emptySpaces = this.emptySpacesBelow(0, i) + 1;\n\n          for (var j = 0; j < emptySpaces; j++) {\n            var randomValue = Math.floor(Math.random() * this.items);\n            result.push({\n              row: j,\n              column: i,\n              deltaRow: emptySpaces\n            });\n            this.gameArray[j][i].value = randomValue;\n            this.gameArray[j][i].isEmpty = false;\n          }\n        }\n      }\n\n      return result;\n    } // returns the amount of empty spaces below the item at (row, column)\n\n  }, {\n    key: "emptySpacesBelow",\n    value: function emptySpacesBelow(row, column) {\n      var result = 0;\n\n      if (row != this.getRows()) {\n        for (var i = row + 1; i < this.getRows(); i++) {\n          if (this.isEmpty(i, column)) {\n            result++;\n          }\n        }\n      }\n\n      return result;\n    } // returns the amount of empty spaces above the item at (row, column)\n\n  }, {\n    key: "emptySpacesAbove",\n    value: function emptySpacesAbove(row, column) {\n      var result = 0;\n\n      if (row != 0) {\n        for (var i = row - 1; i >= 0; i--) {\n          if (this.isEmpty(i, column)) {\n            result++;\n          }\n        }\n      }\n\n      return result;\n    } // swap the items at (row, column) and (row2, column2)\n\n  }, {\n    key: "swapItems",\n    value: function swapItems(row, column, row2, column2) {\n      var tempObject = Object.assign(this.gameArray[row][column]);\n      this.gameArray[row][column] = Object.assign(this.gameArray[row2][column2]);\n      this.gameArray[row2][column2] = Object.assign(tempObject);\n    } // returns true if (row, column) is already in floodFillArray array\n\n  }, {\n    key: "alreadyVisited",\n    value: function alreadyVisited(row, column) {\n      var found = false;\n      this.floodFillArray.forEach(function (item) {\n        if (item.row == row && item.column == column) {\n          found = true;\n        }\n      });\n      return found;\n    }\n  }]);\n\n  return gameField;\n}();\n// CONCATENATED MODULE: ./src/scenes/Win.js\nfunction _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction Win_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction Win_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Win_createClass(Constructor, protoProps, staticProps) { if (protoProps) Win_defineProperties(Constructor.prototype, protoProps); if (staticProps) Win_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\nvar Win_WinScene =\n/*#__PURE__*/\nfunction (_Phaser$Scene) {\n  _inherits(WinScene, _Phaser$Scene);\n\n  function WinScene() {\n    Win_classCallCheck(this, WinScene);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(WinScene).call(this, {\n      key: CST.SCENES.WIN\n    }));\n  }\n\n  Win_createClass(WinScene, [{\n    key: "init",\n    value: function init() {}\n  }, {\n    key: "create",\n    value: function create() {\n      this.add.bitmapText(CST.gameConf.width / 2, CST.gameConf.height / 2, \'font\', \'CONGRATULATION, You Win!!!\', 30).setOrigin(0.5, 0.5);\n    }\n  }]);\n\n  return WinScene;\n}(Phaser.Scene);\n// CONCATENATED MODULE: ./src/scenes/Fail.js\nfunction Fail_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { Fail_typeof = function _typeof(obj) { return typeof obj; }; } else { Fail_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return Fail_typeof(obj); }\n\nfunction Fail_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction Fail_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Fail_createClass(Constructor, protoProps, staticProps) { if (protoProps) Fail_defineProperties(Constructor.prototype, protoProps); if (staticProps) Fail_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction Fail_possibleConstructorReturn(self, call) { if (call && (Fail_typeof(call) === "object" || typeof call === "function")) { return call; } return Fail_assertThisInitialized(self); }\n\nfunction Fail_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction Fail_getPrototypeOf(o) { Fail_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Fail_getPrototypeOf(o); }\n\nfunction Fail_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) Fail_setPrototypeOf(subClass, superClass); }\n\nfunction Fail_setPrototypeOf(o, p) { Fail_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Fail_setPrototypeOf(o, p); }\n\n\nvar Fail_FailScene =\n/*#__PURE__*/\nfunction (_Phaser$Scene) {\n  Fail_inherits(FailScene, _Phaser$Scene);\n\n  function FailScene() {\n    Fail_classCallCheck(this, FailScene);\n\n    return Fail_possibleConstructorReturn(this, Fail_getPrototypeOf(FailScene).call(this, {\n      key: CST.SCENES.FAIL\n    }));\n  }\n\n  Fail_createClass(FailScene, [{\n    key: "init",\n    value: function init() {}\n  }, {\n    key: "create",\n    value: function create() {\n      this.add.bitmapText(CST.gameConf.width / 2, CST.gameConf.height / 2, \'font\', \'OOOOPPPSS, Fail!!!\', 30).setOrigin(0.5, 0.5);\n    }\n  }]);\n\n  return FailScene;\n}(Phaser.Scene);\n// CONCATENATED MODULE: ./src/scenes/GameScene.js\nfunction GameScene_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { GameScene_typeof = function _typeof(obj) { return typeof obj; }; } else { GameScene_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return GameScene_typeof(obj); }\n\nfunction GameScene_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction GameScene_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction GameScene_createClass(Constructor, protoProps, staticProps) { if (protoProps) GameScene_defineProperties(Constructor.prototype, protoProps); if (staticProps) GameScene_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction GameScene_possibleConstructorReturn(self, call) { if (call && (GameScene_typeof(call) === "object" || typeof call === "function")) { return call; } return GameScene_assertThisInitialized(self); }\n\nfunction GameScene_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction GameScene_getPrototypeOf(o) { GameScene_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return GameScene_getPrototypeOf(o); }\n\nfunction GameScene_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) GameScene_setPrototypeOf(subClass, superClass); }\n\nfunction GameScene_setPrototypeOf(o, p) { GameScene_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return GameScene_setPrototypeOf(o, p); }\n\n\n\n\n\nvar GameScene_GameScene =\n/*#__PURE__*/\nfunction (_Phaser$Scene) {\n  GameScene_inherits(GameScene, _Phaser$Scene);\n\n  function GameScene() {\n    GameScene_classCallCheck(this, GameScene);\n\n    return GameScene_possibleConstructorReturn(this, GameScene_getPrototypeOf(GameScene).call(this, {\n      key: CST.SCENES.GAME\n    }));\n  }\n\n  GameScene_createClass(GameScene, [{\n    key: "init",\n    value: function init() {}\n  }, {\n    key: "create",\n    value: function create() {\n      var moves = this.add.image(0, 0, \'moves\').setOrigin(0);\n      var bg = this.add.image(-12, -12, \'background\').setOrigin(0); //container for field\n\n      var hitArea = new Phaser.Geom.Rectangle(0, 0, CST.confField.sizeField.x, CST.confField.sizeField.y);\n      this.containField = this.add.container(CST.confField.boardOffset.x, CST.confField.boardOffset.y);\n      this.containField.setInteractive(hitArea, Phaser.Geom.Rectangle.Contains).on("pointerdown", this.tileSelect, this); //container for Score/Necessary/Moves\n\n      var containScore = this.add.container(545, 117);\n      containScore.add(moves);\n      this.gameField = new gameField({\n        row: 9,\n        columns: 9,\n        items: 4,\n        fallingDown: true\n      });\n      this.containField.add(bg);\n      this.score = 0;\n      this.gameField.generateBoard();\n      this.drawField(this.containField);\n      this.scoreText = this.add.bitmapText(20, 20, \'font\', \'ccc\', 30);\n      this.scoreNecessary = this.add.bitmapText(20, 60, \'font\', \'Necessary: \' + CST.confField.Necessary, 30);\n      this.scoreMoves = this.add.bitmapText(97, 10, \'font\', \'Moves\', 20);\n      this.scoreMovesNum = this.add.bitmapText(110, 140, \'font\', CST.confField.MoveNum, 40);\n      containScore.add(this.scoreMoves);\n      containScore.add(this.scoreMovesNum);\n      this.updateScore();\n    }\n  }, {\n    key: "updateScore",\n    value: function updateScore() {\n      this.scoreText.setText("Score: " + this.score.toString());\n    }\n  }, {\n    key: "updateMoves",\n    value: function updateMoves() {\n      this.scoreMovesNum.setText(this.scoreMovesNum.text - 1);\n\n      if (this.scoreMovesNum.text < 10) {\n        this.scoreMovesNum.setX(130);\n      }\n    }\n  }, {\n    key: "drawField",\n    value: function drawField(contain) {\n      this.poolArray = [];\n\n      for (var i = 0; i < this.gameField.getRows(); i++) {\n        for (var j = 0; j < this.gameField.getColumns(); j++) {\n          var gemX = CST.confField.gemWidth * j + CST.confField.gemWidth / 2;\n          var gemY = CST.confField.gemHeight * i + CST.confField.gemHeight / 2;\n          var gem = this.add.sprite(gemX, gemY, "tiles", this.gameField.getValueAt(i, j));\n          contain.add(gem);\n          this.gameField.setCustomData(i, j, gem);\n        }\n      }\n    }\n  }, {\n    key: "tileSelect",\n    value: function tileSelect(pointer) {\n      var row = Math.floor((pointer.y - CST.confField.boardOffset.y) / CST.confField.gemHeight);\n      var col = Math.floor((pointer.x - CST.confField.boardOffset.x) / CST.confField.gemWidth);\n\n      if (this.gameField.validPick(row, col) && !this.gameField.isEmpty(row, col)) {\n        var connectedItems = this.gameField.countConnectedItems(row, col);\n\n        if (connectedItems > 1) {\n          this.score += connectedItems * (connectedItems - 1);\n          this.updateScore();\n          this.updateMoves();\n          var gemsToRemove = this.gameField.listConnectedItems(row, col);\n          var destroyed = 0;\n          gemsToRemove.forEach(function (gem) {\n            destroyed++;\n            this.poolArray.push(this.gameField.getCustomDataAt(gem.row, gem.column));\n            this.tweens.add({\n              targets: this.gameField.getCustomDataAt(gem.row, gem.column),\n              alpha: 0,\n              duration: CST.confField.destroySpeed,\n              callbackScope: this,\n              onComplete: function onComplete() {\n                destroyed--;\n\n                if (destroyed == 0) {\n                  this.gameField.removeConnectedItems(row, col);\n                  this.makeGemsFall();\n                }\n              }\n            });\n          }.bind(this));\n        }\n      }\n    }\n  }, {\n    key: "makeGemsFall",\n    value: function makeGemsFall() {\n      var movements = this.gameField.arrangeBoard();\n\n      if (movements.length == 0) {\n        this.makeGemsSlide();\n      } else {\n        var fallingGems = 0;\n        movements.forEach(function (movement) {\n          fallingGems++;\n          this.tweens.add({\n            targets: this.gameField.getCustomDataAt(movement.row, movement.column),\n            y: this.gameField.getCustomDataAt(movement.row, movement.column).y + CST.confField.gemHeight * movement.deltaRow,\n            duration: CST.confField.fallSpeed * Math.abs(movement.deltaRow),\n            callbackScope: this,\n            onComplete: function onComplete() {\n              fallingGems--;\n\n              if (fallingGems == 0) {\n                this.makeGemsSlide();\n              }\n            }\n          });\n        }.bind(this));\n      }\n    }\n  }, {\n    key: "makeGemsSlide",\n    value: function makeGemsSlide() {\n      var slideMovements = this.gameField.compactBoardToLeft();\n\n      if (slideMovements.length == 0) {\n        this.endOfMove();\n      } else {\n        var movingGems = 0;\n        slideMovements.forEach(function (movement) {\n          movingGems++;\n          this.tweens.add({\n            targets: this.gameField.getCustomDataAt(movement.row, movement.column),\n            x: this.gameField.getCustomDataAt(movement.row, movement.column).x + CST.confField.gemWidth * movement.deltaColumn,\n            duration: Math.abs(CST.confField.slideSpeed * movement.deltaColumn),\n            ease: "Bounce.easeOut",\n            callbackScope: this,\n            onComplete: function onComplete() {\n              movingGems--;\n\n              if (movingGems == 0) {\n                this.endOfMove();\n              }\n            }\n          });\n        }.bind(this));\n      }\n    }\n  }, {\n    key: "addGems",\n    value: function addGems(contain) {\n      for (var i = 0; i < this.gameField.getRows(); i++) {\n        for (var j = 0; j < this.gameField.getColumns(); j++) {\n          if (this.gameField.isEmpty(i, j)) {\n            var gemX = CST.confField.gemWidth * j + CST.confField.gemWidth / 2;\n            var gemY = CST.confField.gemHeight * i + CST.confField.gemHeight / 2;\n            var randomValue = Math.floor(Math.random() * this.gameField.items);\n            this.gameField.gameArray[i][j] = {\n              value: randomValue,\n              isEmpty: false,\n              row: i,\n              column: j\n            };\n            var gem = this.add.sprite(gemX, gemY, "tiles", this.gameField.getValueAt(i, j)).setDepth(2);\n            contain.add(gem);\n            this.gameField.setCustomData(i, j, gem);\n          }\n        }\n      }\n    }\n  }, {\n    key: "endOfMove",\n    value: function endOfMove() {\n      this.addGems(this.containField);\n\n      if (parseInt(this.scoreMovesNum.text) >= 0 && CST.confField.Necessary < this.score) {\n        this.scene.start(CST.SCENES.WIN);\n      } else if (parseInt(this.scoreMovesNum.text) == 0 && CST.confField.Necessary > this.score) {\n        this.scene.start(CST.SCENES.FAIL);\n      }\n    }\n  }]);\n\n  return GameScene;\n}(Phaser.Scene);\n// CONCATENATED MODULE: ./src/scenes/LoadScene.js\nfunction LoadScene_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { LoadScene_typeof = function _typeof(obj) { return typeof obj; }; } else { LoadScene_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return LoadScene_typeof(obj); }\n\nfunction LoadScene_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction LoadScene_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction LoadScene_createClass(Constructor, protoProps, staticProps) { if (protoProps) LoadScene_defineProperties(Constructor.prototype, protoProps); if (staticProps) LoadScene_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction LoadScene_possibleConstructorReturn(self, call) { if (call && (LoadScene_typeof(call) === "object" || typeof call === "function")) { return call; } return LoadScene_assertThisInitialized(self); }\n\nfunction LoadScene_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction LoadScene_getPrototypeOf(o) { LoadScene_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return LoadScene_getPrototypeOf(o); }\n\nfunction LoadScene_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) LoadScene_setPrototypeOf(subClass, superClass); }\n\nfunction LoadScene_setPrototypeOf(o, p) { LoadScene_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return LoadScene_setPrototypeOf(o, p); }\n\n\n\nvar LoadScene_LoadScene =\n/*#__PURE__*/\nfunction (_Phaser$Scene) {\n  LoadScene_inherits(LoadScene, _Phaser$Scene);\n\n  function LoadScene() {\n    LoadScene_classCallCheck(this, LoadScene);\n\n    return LoadScene_possibleConstructorReturn(this, LoadScene_getPrototypeOf(LoadScene).call(this, {\n      key: CST.SCENES.LOAD\n    }));\n  }\n\n  LoadScene_createClass(LoadScene, [{\n    key: "init",\n    value: function init() {}\n  }, {\n    key: "preload",\n    value: function preload() {\n      var _this = this;\n\n      this.load.image(\'background\', \'dist/assets/bg.png\');\n      this.load.image(\'moves\', \'dist/assets/moves.png\');\n      this.load.bitmapFont("font", "dist/assets/font.png", "dist/assets/font.fnt");\n      this.load.spritesheet(\'tiles\', \'dist/assets/tiles.png\', {\n        frameHeight: CST.confField.gemHeight,\n        frameWidth: CST.confField.gemWidth\n      }); //create loading bar\n\n      var loadingBar = this.add.graphics({\n        fillStyle: {\n          color: 0xdd0066\n        }\n      }); //simulate load\n\n      for (var i = 0; i < 100; i++) {\n        this.load.image(\'moves\', \'dist/assets/moves.png\');\n      }\n\n      this.load.on("progress", function (percent) {\n        loadingBar.fillRect(0, _this.game.renderer.height / 2, _this.game.renderer.width * percent, 50);\n      });\n      this.load.on(\'complete\', function () {\n        _this.scene.start(CST.SCENES.GAME, \'hello from load\');\n      });\n    }\n  }, {\n    key: "create",\n    value: function create() {}\n  }]);\n\n  return LoadScene;\n}(Phaser.Scene);\n// CONCATENATED MODULE: ./src/CST.js\n\n\n\n\nvar CST = {\n  SCENES: {\n    LOAD: "LOAD",\n    GAME: "GAME",\n    WIN: "WIN",\n    FAIL: "FAIL"\n  },\n  confField: {\n    gemHeight: 49,\n    gemWidth: 42.8,\n    boardOffset: {\n      x: 49,\n      y: 117\n    },\n    sizeField: {\n      x: 385.2,\n      y: 441\n    },\n    destroySpeed: 80,\n    fallSpeed: 80,\n    slideSpeed: 100,\n    Necessary: 500,\n    MoveNum: 24\n  },\n  gameConf: {\n    type: Phaser.AUTO,\n    width: 877,\n    height: 620,\n    backgroundColor: "#a1a1a1",\n    scene: [LoadScene_LoadScene, GameScene_GameScene, Win_WinScene, Fail_FailScene]\n  }\n};\n// EXTERNAL MODULE: ./src/font.png\nvar font = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./src/index.js\n\n\nvar game = new Phaser.Game(CST.gameConf);\n\nfunction src_preload() {}\n\nfunction src_create() {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n')}]);